// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/internal/infrastructure/database/ent/helloworld"
	"myapp/internal/infrastructure/database/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HelloWorldUpdate is the builder for updating HelloWorld entities.
type HelloWorldUpdate struct {
	config
	hooks    []Hook
	mutation *HelloWorldMutation
}

// Where appends a list predicates to the HelloWorldUpdate builder.
func (hwu *HelloWorldUpdate) Where(ps ...predicate.HelloWorld) *HelloWorldUpdate {
	hwu.mutation.Where(ps...)
	return hwu
}

// SetLang sets the "lang" field.
func (hwu *HelloWorldUpdate) SetLang(s string) *HelloWorldUpdate {
	hwu.mutation.SetLang(s)
	return hwu
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (hwu *HelloWorldUpdate) SetNillableLang(s *string) *HelloWorldUpdate {
	if s != nil {
		hwu.SetLang(*s)
	}
	return hwu
}

// SetMessage sets the "message" field.
func (hwu *HelloWorldUpdate) SetMessage(s string) *HelloWorldUpdate {
	hwu.mutation.SetMessage(s)
	return hwu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (hwu *HelloWorldUpdate) SetNillableMessage(s *string) *HelloWorldUpdate {
	if s != nil {
		hwu.SetMessage(*s)
	}
	return hwu
}

// Mutation returns the HelloWorldMutation object of the builder.
func (hwu *HelloWorldUpdate) Mutation() *HelloWorldMutation {
	return hwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hwu *HelloWorldUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hwu.sqlSave, hwu.mutation, hwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hwu *HelloWorldUpdate) SaveX(ctx context.Context) int {
	affected, err := hwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hwu *HelloWorldUpdate) Exec(ctx context.Context) error {
	_, err := hwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwu *HelloWorldUpdate) ExecX(ctx context.Context) {
	if err := hwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hwu *HelloWorldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(helloworld.Table, helloworld.Columns, sqlgraph.NewFieldSpec(helloworld.FieldID, field.TypeInt))
	if ps := hwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hwu.mutation.Lang(); ok {
		_spec.SetField(helloworld.FieldLang, field.TypeString, value)
	}
	if value, ok := hwu.mutation.Message(); ok {
		_spec.SetField(helloworld.FieldMessage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helloworld.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hwu.mutation.done = true
	return n, nil
}

// HelloWorldUpdateOne is the builder for updating a single HelloWorld entity.
type HelloWorldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HelloWorldMutation
}

// SetLang sets the "lang" field.
func (hwuo *HelloWorldUpdateOne) SetLang(s string) *HelloWorldUpdateOne {
	hwuo.mutation.SetLang(s)
	return hwuo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (hwuo *HelloWorldUpdateOne) SetNillableLang(s *string) *HelloWorldUpdateOne {
	if s != nil {
		hwuo.SetLang(*s)
	}
	return hwuo
}

// SetMessage sets the "message" field.
func (hwuo *HelloWorldUpdateOne) SetMessage(s string) *HelloWorldUpdateOne {
	hwuo.mutation.SetMessage(s)
	return hwuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (hwuo *HelloWorldUpdateOne) SetNillableMessage(s *string) *HelloWorldUpdateOne {
	if s != nil {
		hwuo.SetMessage(*s)
	}
	return hwuo
}

// Mutation returns the HelloWorldMutation object of the builder.
func (hwuo *HelloWorldUpdateOne) Mutation() *HelloWorldMutation {
	return hwuo.mutation
}

// Where appends a list predicates to the HelloWorldUpdate builder.
func (hwuo *HelloWorldUpdateOne) Where(ps ...predicate.HelloWorld) *HelloWorldUpdateOne {
	hwuo.mutation.Where(ps...)
	return hwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hwuo *HelloWorldUpdateOne) Select(field string, fields ...string) *HelloWorldUpdateOne {
	hwuo.fields = append([]string{field}, fields...)
	return hwuo
}

// Save executes the query and returns the updated HelloWorld entity.
func (hwuo *HelloWorldUpdateOne) Save(ctx context.Context) (*HelloWorld, error) {
	return withHooks(ctx, hwuo.sqlSave, hwuo.mutation, hwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hwuo *HelloWorldUpdateOne) SaveX(ctx context.Context) *HelloWorld {
	node, err := hwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hwuo *HelloWorldUpdateOne) Exec(ctx context.Context) error {
	_, err := hwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hwuo *HelloWorldUpdateOne) ExecX(ctx context.Context) {
	if err := hwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hwuo *HelloWorldUpdateOne) sqlSave(ctx context.Context) (_node *HelloWorld, err error) {
	_spec := sqlgraph.NewUpdateSpec(helloworld.Table, helloworld.Columns, sqlgraph.NewFieldSpec(helloworld.FieldID, field.TypeInt))
	id, ok := hwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HelloWorld.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, helloworld.FieldID)
		for _, f := range fields {
			if !helloworld.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != helloworld.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hwuo.mutation.Lang(); ok {
		_spec.SetField(helloworld.FieldLang, field.TypeString, value)
	}
	if value, ok := hwuo.mutation.Message(); ok {
		_spec.SetField(helloworld.FieldMessage, field.TypeString, value)
	}
	_node = &HelloWorld{config: hwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{helloworld.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hwuo.mutation.done = true
	return _node, nil
}
