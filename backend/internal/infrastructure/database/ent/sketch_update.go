// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/internal/infrastructure/database/ent/predicate"
	"myapp/internal/infrastructure/database/ent/sketch"
	"myapp/internal/infrastructure/database/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SketchUpdate is the builder for updating Sketch entities.
type SketchUpdate struct {
	config
	hooks    []Hook
	mutation *SketchMutation
}

// Where appends a list predicates to the SketchUpdate builder.
func (su *SketchUpdate) Where(ps ...predicate.Sketch) *SketchUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SketchUpdate) SetUpdatedAt(t time.Time) *SketchUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUserID sets the "user_id" field.
func (su *SketchUpdate) SetUserID(i int) *SketchUpdate {
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *SketchUpdate) SetNillableUserID(i *int) *SketchUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// SetImageName sets the "image_name" field.
func (su *SketchUpdate) SetImageName(s string) *SketchUpdate {
	su.mutation.SetImageName(s)
	return su
}

// SetNillableImageName sets the "image_name" field if the given value is not nil.
func (su *SketchUpdate) SetNillableImageName(s *string) *SketchUpdate {
	if s != nil {
		su.SetImageName(*s)
	}
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SketchUpdate) SetUser(u *User) *SketchUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the SketchMutation object of the builder.
func (su *SketchUpdate) Mutation() *SketchMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *SketchUpdate) ClearUser() *SketchUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SketchUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SketchUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SketchUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SketchUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SketchUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := sketch.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SketchUpdate) check() error {
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Sketch.user"`)
	}
	return nil
}

func (su *SketchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sketch.Table, sketch.Columns, sqlgraph.NewFieldSpec(sketch.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(sketch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.ImageName(); ok {
		_spec.SetField(sketch.FieldImageName, field.TypeString, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sketch.UserTable,
			Columns: []string{sketch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sketch.UserTable,
			Columns: []string{sketch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sketch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SketchUpdateOne is the builder for updating a single Sketch entity.
type SketchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SketchMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SketchUpdateOne) SetUpdatedAt(t time.Time) *SketchUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *SketchUpdateOne) SetUserID(i int) *SketchUpdateOne {
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *SketchUpdateOne) SetNillableUserID(i *int) *SketchUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// SetImageName sets the "image_name" field.
func (suo *SketchUpdateOne) SetImageName(s string) *SketchUpdateOne {
	suo.mutation.SetImageName(s)
	return suo
}

// SetNillableImageName sets the "image_name" field if the given value is not nil.
func (suo *SketchUpdateOne) SetNillableImageName(s *string) *SketchUpdateOne {
	if s != nil {
		suo.SetImageName(*s)
	}
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SketchUpdateOne) SetUser(u *User) *SketchUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the SketchMutation object of the builder.
func (suo *SketchUpdateOne) Mutation() *SketchMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SketchUpdateOne) ClearUser() *SketchUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Where appends a list predicates to the SketchUpdate builder.
func (suo *SketchUpdateOne) Where(ps ...predicate.Sketch) *SketchUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SketchUpdateOne) Select(field string, fields ...string) *SketchUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sketch entity.
func (suo *SketchUpdateOne) Save(ctx context.Context) (*Sketch, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SketchUpdateOne) SaveX(ctx context.Context) *Sketch {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SketchUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SketchUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SketchUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := sketch.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SketchUpdateOne) check() error {
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Sketch.user"`)
	}
	return nil
}

func (suo *SketchUpdateOne) sqlSave(ctx context.Context) (_node *Sketch, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sketch.Table, sketch.Columns, sqlgraph.NewFieldSpec(sketch.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sketch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sketch.FieldID)
		for _, f := range fields {
			if !sketch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sketch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(sketch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ImageName(); ok {
		_spec.SetField(sketch.FieldImageName, field.TypeString, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sketch.UserTable,
			Columns: []string{sketch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sketch.UserTable,
			Columns: []string{sketch.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sketch{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sketch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
