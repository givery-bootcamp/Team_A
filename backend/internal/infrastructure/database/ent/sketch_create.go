// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/internal/infrastructure/database/ent/sketch"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SketchCreate is the builder for creating a Sketch entity.
type SketchCreate struct {
	config
	mutation *SketchMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *SketchCreate) SetUserID(i int) *SketchCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetImageName sets the "image_name" field.
func (sc *SketchCreate) SetImageName(s string) *SketchCreate {
	sc.mutation.SetImageName(s)
	return sc
}

// Mutation returns the SketchMutation object of the builder.
func (sc *SketchCreate) Mutation() *SketchMutation {
	return sc.mutation
}

// Save creates the Sketch in the database.
func (sc *SketchCreate) Save(ctx context.Context) (*Sketch, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SketchCreate) SaveX(ctx context.Context) *Sketch {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SketchCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SketchCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SketchCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Sketch.user_id"`)}
	}
	if _, ok := sc.mutation.ImageName(); !ok {
		return &ValidationError{Name: "image_name", err: errors.New(`ent: missing required field "Sketch.image_name"`)}
	}
	return nil
}

func (sc *SketchCreate) sqlSave(ctx context.Context) (*Sketch, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SketchCreate) createSpec() (*Sketch, *sqlgraph.CreateSpec) {
	var (
		_node = &Sketch{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sketch.Table, sqlgraph.NewFieldSpec(sketch.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(sketch.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.ImageName(); ok {
		_spec.SetField(sketch.FieldImageName, field.TypeString, value)
		_node.ImageName = value
	}
	return _node, _spec
}

// SketchCreateBulk is the builder for creating many Sketch entities in bulk.
type SketchCreateBulk struct {
	config
	err      error
	builders []*SketchCreate
}

// Save creates the Sketch entities in the database.
func (scb *SketchCreateBulk) Save(ctx context.Context) ([]*Sketch, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sketch, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SketchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SketchCreateBulk) SaveX(ctx context.Context) []*Sketch {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SketchCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SketchCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
