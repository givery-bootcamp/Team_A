// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"myapp/internal/controller/repository/ent/helloworld"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HelloWorld is the model entity for the HelloWorld schema.
type HelloWorld struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang string `json:"lang,omitempty"`
	// Message holds the value of the "message" field.
	Message      string `json:"message,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HelloWorld) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case helloworld.FieldID:
			values[i] = new(sql.NullInt64)
		case helloworld.FieldLang, helloworld.FieldMessage:
			values[i] = new(sql.NullString)
		case helloworld.FieldCreatedAt, helloworld.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HelloWorld fields.
func (hw *HelloWorld) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case helloworld.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hw.ID = int(value.Int64)
		case helloworld.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hw.CreatedAt = value.Time
			}
		case helloworld.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hw.UpdatedAt = value.Time
			}
		case helloworld.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				hw.Lang = value.String
			}
		case helloworld.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				hw.Message = value.String
			}
		default:
			hw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HelloWorld.
// This includes values selected through modifiers, order, etc.
func (hw *HelloWorld) Value(name string) (ent.Value, error) {
	return hw.selectValues.Get(name)
}

// Update returns a builder for updating this HelloWorld.
// Note that you need to call HelloWorld.Unwrap() before calling this method if this HelloWorld
// was returned from a transaction, and the transaction was committed or rolled back.
func (hw *HelloWorld) Update() *HelloWorldUpdateOne {
	return NewHelloWorldClient(hw.config).UpdateOne(hw)
}

// Unwrap unwraps the HelloWorld entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hw *HelloWorld) Unwrap() *HelloWorld {
	_tx, ok := hw.config.driver.(*txDriver)
	if !ok {
		panic("ent: HelloWorld is not a transactional entity")
	}
	hw.config.driver = _tx.drv
	return hw
}

// String implements the fmt.Stringer.
func (hw *HelloWorld) String() string {
	var builder strings.Builder
	builder.WriteString("HelloWorld(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lang=")
	builder.WriteString(hw.Lang)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(hw.Message)
	builder.WriteByte(')')
	return builder.String()
}

// HelloWorlds is a parsable slice of HelloWorld.
type HelloWorlds []*HelloWorld
